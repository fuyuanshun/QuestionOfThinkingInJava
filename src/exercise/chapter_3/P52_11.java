package exercise.chapter_3;

/**
 * 练习11
 *  以一个最高有效位为1的二进制数字开始（提示:使用十六进制常量），用有符号右移操作符对其进行
 *  右移，直至所有的二进制位都被移出为止，每移一位都要使用Integer.toBinaryString()显示结果.
 */
public class P52_11 {
    public static void main(String[] args) {
        //使用十六进制表示最高有效位为1的二进制数字(31位)
        int a = 0x40000000;
        //移动的次数
        int count = 0;
        //使用二进制表示
        System.out.println("未移动之前的值为: " + Integer.toBinaryString(a));
       /* while ((a >>= 1) != 0) {
            System.out.println("向右移动一位之后的值为: " + Integer.toBinaryString(a));
        }*/
        for (int i = 0; i < 31; i++) {
            count += 1;
            //有符号右移
            a >>= 1;
            System.out.println("向右移动一位之后的值为: " + Integer.toBinaryString(a));
        }
        System.out.println("移动了 " + count + " 次");
    }
}/* Output:
        未移动之前的值为: 1000000000000000000000000000000
        向右移动一位之后的值为: 100000000000000000000000000000
        向右移动一位之后的值为: 10000000000000000000000000000
        向右移动一位之后的值为: 1000000000000000000000000000
        向右移动一位之后的值为: 100000000000000000000000000
        向右移动一位之后的值为: 10000000000000000000000000
        向右移动一位之后的值为: 1000000000000000000000000
        向右移动一位之后的值为: 100000000000000000000000
        向右移动一位之后的值为: 10000000000000000000000
        向右移动一位之后的值为: 1000000000000000000000
        向右移动一位之后的值为: 100000000000000000000
        向右移动一位之后的值为: 10000000000000000000
        向右移动一位之后的值为: 1000000000000000000
        向右移动一位之后的值为: 100000000000000000
        向右移动一位之后的值为: 10000000000000000
        向右移动一位之后的值为: 1000000000000000
        向右移动一位之后的值为: 100000000000000
        向右移动一位之后的值为: 10000000000000
        向右移动一位之后的值为: 1000000000000
        向右移动一位之后的值为: 100000000000
        向右移动一位之后的值为: 10000000000
        向右移动一位之后的值为: 1000000000
        向右移动一位之后的值为: 100000000
        向右移动一位之后的值为: 10000000
        向右移动一位之后的值为: 1000000
        向右移动一位之后的值为: 100000
        向右移动一位之后的值为: 10000
        向右移动一位之后的值为: 1000
        向右移动一位之后的值为: 100
        向右移动一位之后的值为: 10
        向右移动一位之后的值为: 1
        向右移动一位之后的值为: 0
*/